* GitHub [
	…or create a new repository on the command line
		echo "# nextjs-twitch" >> README.md
		git init
		git add README.md
		git commit -m "first commit"
		git branch -M main
		git remote add origin https://github.com/filezingme/nextjs-twitch.git
		git push -u origin main

	…or push an existing repository from the command line
		git remote add origin https://github.com/filezingme/nextjs-twitch.git
		git branch -M main
		git push -u origin main
]

--------------------------------------------------------------------------------------------
- Setup [
	> https://www.codewithantonio.com/courses/b30909d3-bdfb-4b89-9d39-22037a1a199b/chapters/82770ce0-3be4-4367-8145-cdd5c46e7b3b
	
	$ npx create-next-app@latest video-twitch [
		√ Would you like to use TypeScript? ... Yes
		√ Would you like to use ESLint? ... Yes
		√ Would you like to use Tailwind CSS? ... Yes
		√ Would you like to use `src/` directory? ... No
		√ Would you like to use App Router? (recommended) ... Yes
		? Would you like to customize the default import alias (@*)? » No
			> ESLint là một công cụ kiểm tra mã nguồn JavaScript để phát hiện và sửa các lỗi cú pháp, phong cách và logic trong mã nguồn. Nó giúp đảm bảo rằng mã của bạn tuân theo các quy tắc và tiêu chuẩn đã định trước, giúp tăng cường chất lượng mã, dễ bảo trì và chia sẻ giữa các thành viên trong nhóm phát triển.
				Next.js là một framework React phổ biến được sử dụng để xây dựng ứng dụng web. Khi bạn sử dụng Next.js để phát triển ứng dụng React, bạn có thể tích hợp ESLint để kiểm tra và đảm bảo chất lượng mã nguồn của bạn. ESLint có thể cài đặt và cấu hình cho dự án Next.js của bạn để tự động kiểm tra mã khi bạn phát triển và xây dựng ứng dụng.
				Việc tích hợp ESLint trong Next.js giúp bạn duy trì mã nguồn sạch sẽ, giảm lỗi và giúp tập trung vào việc phát triển tính năng thay vì lo lắng về các vấn đề liên quan đến chất lượng mã.
		]	
		
	$ npm run dev
	
	- Install 'Tailwind CSS IntelliSense' trong vscode
		> Tailwind CSS IntelliSense cải thiện trải nghiệm phát triển với Tailwind bằng cách cung cấp cho người dùng Visual Studio Code những tính năng nâng cao như tự động hoàn thành, làm nổi bật cú pháp và kiểm tra lỗi.
		
	$ npx shadcn-ui@latest init [
		> ref: https://ui.shadcn.com/docs/installation/next
		> Lệnh npx shadcn-ui@latest init được sử dụng để khởi tạo một dự án mới sử dụng giao diện người dùng (UI) từ Shadcn. Trong ngữ cảnh này, npx là một công cụ được cài đặt kèm theo Node.js và npm, giúp chạy các lệnh npm mà không cần phải cài đặt gói đó toàn cục. shadcn-ui là tên gói cài đặt, và @latest đảm bảo rằng bạn sử dụng phiên bản mới nhất của gói.
			Khi bạn chạy lệnh này, nó sẽ thực hiện các bước cài đặt và cấu hình cần thiết để bắt đầu một dự án mới với giao diện người dùng của Shadcn. Thông thường, lệnh init sẽ tự động tạo ra cấu trúc thư mục cần thiết, cài đặt các gói phụ thuộc, và thiết lập các tùy chọn khác để bạn có thể bắt đầu phát triển dự án ngay lập tức.
			Lưu ý rằng chi tiết cụ thể về cách giao diện người dùng Shadcn được cấu trúc và hoạt động sẽ phụ thuộc vào tài liệu của Shadcn và phiên bản cụ thể mà bạn đang sử dụng. Hãy kiểm tra tài liệu của Shadcn để biết thêm thông tin về việc sử dụng lệnh init và tùy chọn khác có sẵn.
		
		√ Would you like to use TypeScript (recommended)? ... yes
		√ Which style would you like to use? » Default
		√ Which color would you like to use as base color? » Neutral
		√ Where is your global CSS file? ... app/globals.css
		√ Would you like to use CSS variables for colors? ... yes
		√ Where is your tailwind.config.js located? ...  tailwind.config.ts
		√ Configure the import alias for components: ... @/components
		√ Configure the import alias for utils: ... @/lib/utils
		? Are you using React Server Components? » yes
		√ Write configuration to components.json. Proceed? ... yes
		
		$ npx shadcn-ui@latest add button
			> https://ui.shadcn.com/docs/components/button
			> sẽ tạo ra file 'components\ui\button.tsx'
				- có thể tạo thêm thuộc tính cho nút này, ví dụ:
					custom: "text-white bg-blue-500"
				- và trong 'app\page.tsx' gọi thuộc tính vừa thêm:
					<Button size='lg' variant='custom'>Click me</Button>
		]
]
				
- Routing Concepts [
	- tạo file 'app\folder\page.tsx' thì sẽ truy cập được bằng 'http://localhost:3000/folder'
	- hoặc 'app\folder\folder2\page.tsx' thì sẽ truy cập được bằng 'http://localhost:3000/folder/folder2'
	
	- dạng API Routing: [
		- tạo 'app\folder\route.ts' 
			export function GET() {
				return Response.json({foo: "bar"});
			}
		- thì sẽ truy cập được bằng 'http://localhost:3000/folder', sẽ in ra nội dung:
			{"foo":"bar"}
		]
			
	- tạo một layout chung cho trang login và register (có thư mục cha và file layout ở trong) [
		> url sẽ có dạng:
			http://localhost:3000/auth/login
			http://localhost:3000/auth/register
					
		- tạo 'app\auth\login\page.tsx'
			const LoginPage = () => {
				return (
					<div>
						Login Page
					</div>
				)
			}
			export default LoginPage
			
		- tạo 'app\auth\register\page.tsx'
			const RegisterPage = () => {
				return (
					<div>
						Register Page
					</div>
				)
			}
			export default RegisterPage
			
		- tạo 'app\auth\layout.tsx'
			const AuthLayout = ({children}: {children: React.ReactNode}) => {
				return (
					<div className="flex flex-col gap-y-4">
						<nav className="p-1 bg-red-500 w-500">
							Auth Navbar
						</nav>
						{children}
					</div>        
				)
			}
			export default AuthLayout
			
				> Trong đoạn mã Next.js bạn đã cung cấp, `className` là một thuộc tính của React được sử dụng để đặt các lớp CSS cho phần tử HTML tương ứng. Dưới đây là giải thích các lớp CSS được thêm vào từ `className`:
				1. `flex flex-col gap-y-4`: Đây là một tổ hợp của các lớp CSS được cung cấp bởi Tailwind CSS, một thư viện CSS utility phổ biến. 
				   - `flex`: Đặt phần tử trong một container có thuộc tính display: flex, làm cho các phần tử con của nó trở thành các phần tử linh hoạt.
				   - `flex-col`: Đặt flex-direction thành column, sắp xếp các phần tử con theo chiều dọc.
				   - `gap-y-4`: Thêm một khoảng cách dọc (theo chiều dọc) giữa các phần tử con, trong trường hợp này là 4 đơn vị.
				2. `nav`: Là một lớp CSS đơn giản đặt kiểu cho phần tử `<nav>`. Nó có thể được sử dụng để định dạng và tùy chỉnh giao diện của thanh điều hướng (navigation) trong trang web của bạn.
				3. `p-1`: Thêm padding với giá trị là 1 đơn vị. Giá trị này phản ánh kích thước của khoảng cách giữa nội dung và mép của phần tử.
				4. `bg-red-500`: Đặt màu nền của phần tử thành một màu đỏ có mã màu là 500. Trong Tailwind CSS, các giá trị màu được định nghĩa trong một bảng mã màu, trong trường hợp này là màu đỏ có độ đậm 500.
				5. `w-500`: Đặt chiều rộng của phần tử thành một giá trị cụ thể là 500 đơn vị. Trong Tailwind CSS, `w-` là viết tắt của width và được sử dụng để đặt chiều rộng của phần tử.
				Lưu ý rằng cụm từ "flex", "flex-col", "gap-y-4", "p-1", "bg-red-500", và "w-500" là những class được Tailwind CSS cung cấp để giúp thiết kế giao diện một cách dễ dàng và hiệu quả.
		]
			
	- tạo một layout chung cho trang login và register (có thư mục cha ảo và file layout ở trong) [
		> nhưng url có dạng (không cần tên thư mục cha trong url > do thư mục ảo (auth)):
			http://localhost:3000/login
			http://localhost:3000/register
			
		> để làm được điều này phải có thư mục ảo cha dạng (auth)
		
		- tạo 'app\(auth)\login\page.tsx'
			const Page = () => {
				return (
					<div>
						Login Page
					</div>
				)
			}
			export default Page
		
		- tạo 'app\(auth)\register\page.tsx'
			const Page = () => {
				return (
					<div>
						Register Page
					</div>
				)
			}
			export default Page
		
		- tạo 'app\(auth)\layout.tsx'
			const AuthLayout = ({children} : {children: React.ReactNode}) => {
				return (
					<div className="flex flex-col gap-y-4">
						<nav className="bg-red-500 w-full">
							Auth Nav
						</nav>
						{children}
					</div>
				)
			}
			export default AuthLayout
		]
		
	- mặc định component là server component, nên muốn chuyển thành client thì như sau [
		- tạo 'app\test\page.tsx'
			"use client"
			const TestPage = () => {

				const onClick = () => {
					console.log("Something")
				}

				return (
					<div onClick={onClick}>
						Helle Test Page
					</div>
				)
			}
			export default TestPage
			
			> dùng "use client" thì mới có thể click trên client được
			> Server components:
				> backend behaviour
				> database access
				> server cache
				> streaming
				> partial rendering
				> SEO
				> initial page load
			> client components:
				> frontend behaviour
				> useEffect
				> useState
				> onClick
		]
]

--------------------------------------------------------------------------------------------
- Authentication [
	- https://clerk.com/
		> một dịch vụ quản lý xác thực và quyền truy cập dành cho các ứng dụng web.
			Clerk cung cấp các công cụ và API để giúp các nhà phát triển xây dựng, quản lý, và tùy chỉnh các trải nghiệm đăng nhập và xác thực người dùng trong ứng dụng của họ. Điều này bao gồm việc quản lý thông tin người dùng, quyền truy cập, đăng ký, và các khía cạnh khác của quản lý người dùng.
			Một số tính năng mà Clerk có thể cung cấp bao gồm:
			1. **Xác thực người dùng:** Clerk có thể giúp xác thực người dùng thông qua các phương tiện như email/password, xác minh một lần (OTP), và các phương thức xác thực khác.
			2. **Quản lý thông tin người dùng:** Lưu trữ và quản lý thông tin cá nhân của người dùng.
			3. **Quản lý quyền truy cập:** Cấp và quản lý quyền truy cập cho người dùng trong ứng dụng.
			4. **Giao diện người dùng:** Cung cấp các thành phần giao diện người dùng để tích hợp vào ứng dụng, giúp dễ dàng thêm các chức năng đăng nhập và quản lý người dùng.
			
		> Login: bằng tài khoản github filezingme
		
		- Add Application:
			> Application name: gamehub
			> How will your users sign in?
				> Google: Enable (chỉ enable mỗi google, tất cả khác Off hết)
				> Click 'create application'
					> Quickstarts: chọn 'Nextjs'
					> API Keys: copy api key và tạo file '.env.local'
						NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_ZGlzY3JldGUtZHJ1bS05NS5jbGVyay5hY2NvdW50cy5kZXYk
						CLERK_SECRET_KEY=sk_test_1ZGFU4StnhKcwf3BzoO46P6AxmI0rcbaJtyzBXnXal
					> click 'Continue in docs' để xem hướng dẫn docs
					
	- tạo file '.env'
						
	- update file '.gitignore' 
		> thêm line này:
			...
			.env
			...
			
	- nhấn ctrl+shift+p và gõ 'reload' > hiện ra 'Developer: reload window' thì chọn > sẽ khởi động lại vscode
		> mục đích để app nhận file .env
		
	- paste apikey đã tạo ở trên vào file .env vừa tạo, file chỉ chứa mỗi content này:
		NEXT_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_ZGlzY3JldGUtZHJ1bS05NS5jbGVyay5hY2NvdW50cy5kZXYk
		CLERK_SECRET_KEY=sk_test_1ZGFU4StnhKcwf3BzoO46P6AxmI0rcbaJtyzBXnXal
		
	- ở bước trên: click 'Continue in docs' để xem hướng dẫn docs sẽ nhìn thấy:
		- mục 'Install @clerk/nextjs'
			- copy và chạy lệnh 'npm install @clerk/nextjs' trong vscode như hướng dẫn
			
		- mục 'Wrap your app in <ClerkProvider>'
			- copy import { ClerkProvider } from '@clerk/nextjs' ở hướng dẫn và dán vào đầu của file 'app\layout.tsx'
			- bọc thẻ <html> trong file 'app\layout.tsx' bằng thẻ <ClerkProvider> như hướng dẫn
				<ClerkProvider>
				  <html lang="en">
					<body className={inter.className}>{children}</body>
				  </html>
				</ClerkProvider>
				
		- mục 'Require authentication to access your app'
			- copy code như hướng dẫn và tạo file middleware.ts và rồi dán code vào:
				import { authMiddleware } from "@clerk/nextjs";
 
				// This example protects all routes including api/trpc routes
				// Please edit this to allow other routes to be public as needed.
				// See https://clerk.com/docs/references/nextjs/auth-middleware for more information about configuring your Middleware
				export default authMiddleware({});
				 
				export const config = {
				  matcher: ['/((?!.+\\.[\\w]+$|_next).*)', '/', '/(api|trpc)(.*)'],
				};
				
		- mục 'Next steps'
			- click 'Create custom sign-up and sign-in pages' để chuyến đến trang 'https://clerk.com/docs/references/nextjs/custom-signup-signin-pages'
				> ở mục 'Build your sign-up page'
					> xem hướng dẫn và tạo file 'app\(auth)\sign-up\[[...sign-up]]\page.tsx'
						> copy code như hướng dẫn vào:
							import { SignUp } from "@clerk/nextjs";
 
							export default function Page() {
							  return <SignUp />;
							}
				
				> ở mục 'Build your sign-in page'
					> xem hướng dẫn và tạo file 'app\(auth)\sign-in\[[...sign-in]]\page.tsx'
						> copy code như hướng dẫn vào:
							import { SignIn } from "@clerk/nextjs";
 
							export default function Page() {
							  return <SignIn />;
							}
							
				> ở mục 'Update your environment variables'
					> code code như hướng dẫn vào file '.env':
						...
						NEXT_PUBLIC_CLERK_SIGN_IN_URL=/sign-in
						NEXT_PUBLIC_CLERK_SIGN_UP_URL=/sign-up
						NEXT_PUBLIC_CLERK_AFTER_SIGN_IN_URL=/
						NEXT_PUBLIC_CLERK_AFTER_SIGN_UP_URL=/
						
	- chạy 'npm run dev' và truy cập 'http://localhost:3000' xem kết quả
		> sẽ redirect tới trang 'http://localhost:3000/sign-in?redirect_url=http%3A%2F%2Flocalhost%3A3000%2F'
			> một cửa sổ 'Sign in' hiện ra, nhấn vào 'Continue with Google'
				> sau khi đăng nhập và approval với tài khoản google thì sẽ redirect trở lại trang chủ '/', lúc này sẽ nhìn thấy nội dung trang home:
					'Only authenticated users can see this'
					
	- tạo giao diện trang chủ với nút UserButton để click signout tài khoản:
		> update 'app\page.tsx' với code như sau:
			import {UserButton} from '@clerk/nextjs'

			export default function Page() {
			  return (
				<div className='flex flex-col gap-y-4'>
				  <h1>Dashboard</h1>
				  <UserButton
					afterSignOutUrl='/'
				  />
				</div>
			  )
			}
		
		> chạy và xem kết quả signout
		
	- tạo file layout 'app\(auth)\layout.tsx' chung cho các trang sing-in và sign-out, có code như sau:
		const AuthLayout = ({children} : {children: React.ReactNode}) => {
			return (
				<div className="h-full flex items-center justify-center">
					{children}
				</div>
			)
		}
		export default AuthLayout
		
			> giải thích từng class:
			1. **`h-full`**: Đặt chiều cao của phần tử là 100% chiều cao của phần tử cha. Nói cách khác, phần tử sẽ chiếm toàn bộ chiều cao của phần tử chứa nó.
			2. **`flex`**: Đặt phần tử trong một container flex, làm cho các phần tử con của nó trở thành các phần tử linh hoạt. Các phần tử con sẽ căng hoặc co lại để điều vừa vặn với kích thước của container.
			3. **`items-center`**: Đặt phần tử con theo chiều dọc giữa (theo trục chính của container flex). Điều này làm cho nó nằm ở giữa theo chiều dọc.
			4. **`justify-center`**: Đặt phần tử con theo chiều ngang giữa (theo trục chính của container flex). Điều này làm cho nó nằm ở giữa theo chiều ngang.
			Tổng cộng, đoạn mã trên làm cho phần tử có chiều cao bằng với chiều cao của phần tử chứa nó, và đặt nó ở giữa cả theo chiều dọc và chiều ngang, tạo ra một trung tâm dọc và ngang. Điều này thường được sử dụng để căn giữa nội dung của một phần tử trong giao diện.
		
	- update 'app\globals.css', thêm css sau vào:
		html, body, :root {
		  height: 100%;
		}
]

--------------------------------------------------------------------------------------------
- Dark mode [
	- update 'app\globals.css' [
		@tailwind base;
		@tailwind components;
		@tailwind utilities;

		html,
		body,
		:root {
		  height: 100%;
		  @apply bg-neutral-900/80;
		}

		.hidden-scrollbar {
		  -ms-overflow-style: none;
		  scrollbar-width: none;
		}

		.hidden-scrollbar::-webkit-scrollbar { 
		  display: none;
		}
		 
		@layer base {
		  :root {
			--background: 0 0% 100%;
			--foreground: 222.2 84% 4.9%;

			--card: 0 0% 100%;
			--card-foreground: 222.2 84% 4.9%;
		 
			--popover: 0 0% 100%;
			--popover-foreground: 222.2 84% 4.9%;
		 
			--primary: 222.2 47.4% 11.2%;
			--primary-foreground: 210 40% 98%;
		 
			--secondary: 210 40% 96.1%;
			--secondary-foreground: 222.2 47.4% 11.2%;
		 
			--muted: 210 40% 96.1%;
			--muted-foreground: 215.4 16.3% 46.9%;
		 
			--accent: 210 40% 96.1%;
			--accent-foreground: 222.2 47.4% 11.2%;
		 
			--destructive: 0 84.2% 60.2%;
			--destructive-foreground: 210 40% 98%;

			--border: 214.3 31.8% 91.4%;
			--input: 214.3 31.8% 91.4%;
			--ring: 222.2 84% 4.9%;
		 
			--radius: 0.5rem;
		  }
		 
		  .dark {
			--background: 226.7 12.7% 13.9%;
			--foreground: 210 40% 98%;
		 
			--card: 226.7 12.7% 13.9%;
			--card-foreground: 210 40% 98%;
		 
			--popover: 226.7 12.7% 13.9%;
			--popover-foreground: 210 40% 98%;
		 
			--primary: 210 40% 98%;
			--primary-foreground: 222.2 47.4% 11.2%;
		 
			--secondary: 226.7 12.7% 17.5%;
			--secondary-foreground: 210 40% 98%;
		 
			--muted: 226.7 12.7% 17.5%;
			--muted-foreground: 215 20.2% 65.1%;
		 
			--accent: 226.7 12.7% 17.5%;
			--accent-foreground: 210 40% 98%;
		 
			--destructive: 0 62.8% 30.6%;
			--destructive-foreground: 210 40% 98%;
		 
			--border: 226.7 12.7% 17.5%;
			--input: 226.7 12.7% 17.5%;
			--ring: 212.7 26.8% 83.9%;
		  }
		}
		 
		@layer base {
		  * {
			@apply border-border;
		  }
		  body {
			@apply bg-background text-foreground;
		  }
		}
	]	
	
	- thêm ảnh 'public\spooky.svg'
		> được lấy từ 'https://github.com/AntonioErdeljac/next14-twitch-clone/blob/master/public/spooky.svg'
		
	- tạo file 'app\(auth)\_components\logo.tsx' [
		import Image from 'next/image'
		import {Poppins} from 'next/font/google'
		import {cn} from '@/lib/utils'

		const font = Poppins({
			subsets: ["latin"],
			weight: ["200", "300", "400", "500", "600", "700", "800"]
		})

		export const Logo = () => {
			return (
				<div className='flex flex-col items-center gap-y-4'>
					<div className='bg-white rounded-full p1'>
						<Image 
							src="/spooky.svg"
							alt="Gamehub"
							height={80}
							width={80}
						/>
					</div>
					<div className={cn(
						'flex flex-col items-center',
						font.className
						)}>
						<p className="text-xl font-semibold">
							Gamehub
						</p>
						<p className="text-sm text-muted-foreground">
							Let's play
						</p>
					</div>
				</div>
			)
		}
	]
	
	- update 'app\(auth)\layout.tsx' [
		import { Logo } from "./_components/logo"
		...
			<div className="h-full flex flex-col items-center justify-center space-y-6">
				<Logo/>
				{children}
			</div>
		...
	]
		
		
	- chạy lệnh:
		$npm i @clerk/themes
	
	- update 'app\layout.tsx' [
		...
		import {dark} from '@clerk/themes'
		...
		<ClerkProvider appearance={{baseTheme: dark}}>
		  ...
		</ClerkProvider>
		...
	]
	
	- chạy lệnh:
		$npm install next-themes
			> ref: https://ui.shadcn.com/docs/dark-mode/next
		
		$npm run dev
		
	- tạo 'components\theme-provider.tsx' [
		"use client"

		import * as React from "react"
		import { ThemeProvider as NextThemesProvider } from "next-themes"
		import { type ThemeProviderProps } from "next-themes/dist/types"

		export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
		  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
		}
	]
		> ref phần 'Create a theme provider' trong 'https://ui.shadcn.com/docs/dark-mode/next'
		
	- update 'app\layout.tsx' [
		...
		import {ThemeProvider} from '@/components/theme-provider'
		...
		<ThemeProvider
            attribute='class'
            forcedTheme='dark'
            storageKey='gamehub-theme'
		>
			{children}
		</ThemeProvider>
		...
	]
	
	- vào 'https://dashboard.clerk.com/' để config thêm cái authentication
		> click app 'gamehub', chuyển trang mới:
			> click 'Users'
				> click 'Delete Users'
		
		> click 'User & Authentication'
			> click 'Email, Phone, Username'
				> Username: click để enable
				> click icon bánh răng rồi chọn bỏ enable mục 'Sign-in > Allow users to sign in with their username'
			
			> click 'Apply Changes'
			
		> trở lại trang chủ http://localhost:3000/ và login lại xem kq đã hiện username để nhập
			> login thành công thì
				> click icon và chọn 'Manage account' để đổi username nếu muốn
]

--------------------------------------------------------------------------------------------
- Database [
	- đăng nhập 'https://auth.planetscale.com/sign-in' với tài khoản github 
		> Create a new database
			> Database name: gamehub
			> Plan type: Hobby > 'Your Hobby plan has a limit of 5 GB of storage.'
			> nhập thông tin thẻ tín dụng, nhớ mở khóa thẻ để add vào site thì mới Create Database loại Hobby free được
			> nhấn 'Create Database'
				> Select your language or framework: chọn 'Prisma'
				> Create a password
					> Password name: 'main-2023-12-23-nysjox'
					> click 'Create password'
						> Username: 'drat558012bzz90bfq28'
						> Password: 'pscale_pw_P61oAWi3Uu1pZT9mvQyedGDfds5teo2DsMmP0tyauCI_bk2806'
				> Configure your Prisma application
					> chạy lệnh: '$npm install prisma' hoặc '$npm i -D prisma' [
						'npm install prisma' và 'npm i -D prisma' là hai lệnh khác nhau về cách cài đặt và cách npm xử lý các gói.

						1. **'npm install prisma':**
						   - Lệnh này cài đặt gói 'prisma' và thêm nó vào danh sách dependencies trong tệp 'package.json' của bạn.
						   - Dependencies là những gói cần thiết để chạy ứng dụng của bạn.

						2. **'npm i -D prisma':**
						   - Lệnh này cũng cài đặt gói 'prisma', nhưng nó thêm nó vào danh sách devDependencies trong tệp 'package.json' của bạn.
						   - DevDependencies là những gói chỉ cần thiết cho quá trình phát triển (ví dụ như các công cụ kiểm thử hoặc biên dịch) và không cần thiết để chạy ứng dụng trong môi trường sản xuất.

						Sự khác biệt chủ yếu giữa hai lệnh này là về nơi mà gói được liệt kê trong 'package.json'. Nếu bạn đang cài đặt một công cụ phát triển, ví dụ như Prisma CLI, bạn có thể muốn thêm nó vào 'devDependencies' vì bạn chỉ cần nó trong quá trình phát triển và không cần nó khi triển khai ứng dụng.
					]
					
					> chạy lệnh: 'npm i @prisma/client' [
						Lệnh 'npm i @prisma/client' được sử dụng để cài đặt '@prisma/client', một phần của Prisma ORM. Prisma Client là một thư viện được tạo ra tự động từ mô hình cơ sở dữ liệu của bạn thông qua Prisma Schema. Nó cung cấp một giao diện lập trình ứng dụng (API) để tương tác với cơ sở dữ liệu từ ứng dụng Node.js của bạn.
						
						Khi bạn chạy lệnh này:						
						npm i @prisma/client

						Nó sẽ thực hiện các bước sau:
						1. Tải về và cài đặt '@prisma/client' từ npm registry.
						2. Tạo ra Prisma Client dựa trên các định nghĩa trong tệp Prisma Schema của bạn.
						Prisma Client sẽ chứa các phương thức và đối tượng cho mỗi bảng trong cơ sở dữ liệu của bạn, giúp bạn thực hiện các truy vấn cơ sở dữ liệu một cách hiệu quả và tiện lợi trong mã nguồn của ứng dụng Node.js.
						Lưu ý rằng trước khi chạy lệnh này, bạn cần đảm bảo rằng bạn đã cài đặt Prisma CLI và đã có tệp Prisma Schema định nghĩa cấu trúc của cơ sở dữ liệu của bạn.
					]
					
					> chạy lệnh: '$npx prisma init' [
						Lệnh 'npx prisma init' được sử dụng để khởi tạo một dự án sử dụng Prisma. Cụ thể, lệnh này sẽ thực hiện các bước sau:
						1. **Tạo tệp Prisma Schema:** Tạo một tệp có tên là 'schema.prisma'. Trong tệp này, bạn sẽ định nghĩa cấu trúc của cơ sở dữ liệu bằng cách sử dụng ngôn ngữ đặc biệt của Prisma.
						2. **Cài đặt Prisma CLI:** Đảm bảo rằng Prisma CLI (Command Line Interface) đã được cài đặt trong dự án của bạn. Prisma CLI cung cấp các lệnh để tạo và quản lý migration, đồng bộ hóa cơ sở dữ liệu, và thực hiện các tác vụ khác liên quan đến cơ sở dữ liệu.
						3. **Tạo một đối tượng cơ sở dữ liệu (Database Client):** Tạo một đối tượng Prisma Client dựa trên cấu trúc của tệp Prisma Schema. Prisma Client là một thư viện JavaScript/TypeScript mà bạn có thể sử dụng trong mã nguồn của mình để tương tác với cơ sở dữ liệu.
						
						Lệnh 'npx' được sử dụng để chạy một công cụ hoặc gói npm mà không cần phải cài đặt nó toàn cục. Nếu bạn chưa cài đặt Prisma CLI trước đó, lệnh 'npx prisma init' sẽ tự động tải Prisma CLI và thực hiện các bước khởi tạo.
						Sau khi bạn chạy lệnh này, bạn sẽ có một dự án Prisma cơ bản đã được cấu hình và sẵn sàng để phát triển với cơ sở dữ liệu của mình.
					]
						> chạy xong sẽ tạo ta file và thư mục: 'prisma\schema.prisma'
						
					> Phần 'Add credentials to .env'
						> để mặc định 'Optimized' checked
						> trong phần .env thì copy và dán vào trong file '.env' thay thế cho giá trị biến 'DATABASE_URL':
							DATABASE_URL='mysql://drat558012bzz90bfq28:pscale_pw_P61oAWi3Uu1pZT9mvQyedGDfds5teo2DsMmP0tyauCI@aws.connect.psdb.cloud/gamehub?sslaccept=strict'
							
					> Phần 'Connecting and querying'
						> copy config như đã cho tới file 'prisma\schema.prisma' [
							datasource db {
							  provider     = "mysql"
							  url          = env("DATABASE_URL")
							  relationMode = "prisma"
							}

							generator client {
							  provider = "prisma-client-js"
							}
						]
						
						> chạy lệnh 'npx prisma db push' như hướng dẫn		
							> sẽ nhìn thấy thông báo: 'The database is already in sync with the Prisma schema.'

	- cần cài extension có tên 'Prisma' trong vscode mục đích để 'Adds syntax highlighting, linting, code completion, formatting, jump-to-definition and more for Prisma Schema files.'
		> install xong thì tất cả code trong file 'prisma\schema.prisma' này sẽ được highlighting đẹp, chứ ko còn 1 màu text trắng tinh nữa
		
	- tạo file 'lib\db.ts' [
		import { PrismaClient } from '@prisma/client';
		declare global {
			var prisma: PrismaClient | undefined;
		}
		export const db = globalThis.prisma || new PrismaClient();
		if (process.env.NODE_ENV !== 'production')
			globalThis.prisma = db
	]
	
	- update 'prisma\schema.prisma': tạo một model tên là User [
		...
		model User {
		  id String @id @default(uuid())
		  username String @unique
		  imageUrl String @db.Text
		  externalUserId String @unique
		  bio String? @db.Text //Dấu chấm hỏi (?) ở cuối kiểu dữ liệu String cho biết rằng trường này có thể có giá trị null (không bắt buộc).

		  createdAt DateTime @default(now())
		  updatedAt DateTime @updatedAt
		}
		...
	]
		> ghi chú:
			> bio String? @db.Text: 
				> Đoạn code trên đang mô tả một trường bio trong cơ sở dữ liệu, nó có kiểu dữ liệu là String và có thể là null, và cách dữ liệu được lưu trữ có thể được định cấu hình bằng cách sử dụng directive @db.Text.
		
	- chạy các lệnh:
		$npx prisma db push
			> sẽ thấy thông báo sync
				Environment variables loaded from .env
				Prisma schema loaded from prisma\schema.prisma
				Datasource "db": MySQL database "gamehub" at "aws.connect.psdb.cloud"

				Your database is now in sync with your Prisma schema. Done in 7.23s

				✔ Generated Prisma Client (v5.7.1) to .\node_modules\@prisma\client in 105ms
			
		$npx prisma generate
			> lệnh này để thực hiện tạo bảng User vào trong db từ model trên
			
		$npx prisma studio
			> lệnh này cho ta một url 'http://localhost:5555' để truy cập xem db:
				Environment variables loaded from .env
				Prisma schema loaded from prisma\schema.prisma
				Prisma Studio is up on http://localhost:5555
]

--------------------------------------------------------------------------------------------
- Local tunnel [		
	- đầu tiên cài đặt Chocolatey:
		> Mở PowerShell với quyền quản trị (Run as Administrator).
		> Chạy lệnh sau để cài đặt Chocolatey:
			Set-ExecutionPolicy Bypass -Scope Process -Force; [System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'))

		> Khi quá trình cài đặt hoàn tất, đóng và mở lại PowerShell để có biến môi trường mới được áp dụng.
		> Chạy lệnh `choco` trong PowerShell để xác minh rằng Chocolatey đã được cài đặt thành công.	   
			> nếu lệnh không thấy choco có nghĩa là cài đặt thất bại, cần xóa thư mục này đi 'C:\ProgramData\chocolatey' và chạy lại lệnh cài đặt Chocolatey phía trên
			> muốn chạy ngrok thông qua vscode thì cần phải restart lại vscode để terminal có thể nhận
	
	- truy cập 'ngrok.com' với tài khoản github
		> ref 'https://dashboard.ngrok.com/get-started/setup/windows'
			  'https://ngrok.com/download'
		
		- chạy lệnh cài đặt ngrok thông qua Chocolatey đã cài đặt ở trên
			$choco install ngrok
				> Do you want to run the script?([Y]es/[A]ll - yes to all/[N]o/[P]rint): y
				
			> chạy lệnh:
				'$ngrok config add-authtoken 2JDEvFJwmjbGpb8SaV7GVCECK4A_5u5nfqpzzdZhkh87A6ScM'
					> sẽ tạo ra file 'C:\Users\phucb\AppData\Local\ngrok\ngrok.yml'
						> có thể check file ngrok.yml nằm ở đâu bằng lệnh:
							'$ ngrok config check'				
								> nếu muốn gỡ đi để cài lại thì dùng lệnh:
									$choco uninstall ngrok --force
									
									lệnh trên sẽ buộc gỡ cài đặt ngrok mặc dù đã cài đặt phiên bản 3.5.0. Nếu lệnh trên không hoạt động, bạn có thể thử tùy chọn
									$choco uninstall ngrok --force --ignore-checksums
									
									hoặc cài đặt một phiên bản cụ thể,
									choco install ngrok --version=3.4.0		

								> ref docs 'https://ngrok.com/docs/getting-started/?os=windows'
						
		- chạy lệnh 'ngrok http 3000' để  tạo một random url với hậu tố 'ngrok-free.app' được map tới 'localhost:3000'
			> kết quả in ra:
				Introducing Pay-as-you-go pricing: https://ngrok.com/r/payg
				Session Status                online
				Account                       bloxfruitofficer@gmail.com (Plan: Free)
				Version                       3.5.0
				Region                        Asia Pacific (ap)
				Latency                       48ms
				Web Interface                 http://127.0.0.1:4040
				Forwarding                    https://d22c-2402-800-61b3-7be3-3dfa-66ab-b4c6-a59a.ngrok-free.app -> http://localhost:3000
				Connections                   ttl     opn     rt1     rt5     p50     p90     
											  10      1       0.06    0.03    0.37    21.52   
				HTTP Requests
				-------------
				
			> kết quả chạy 'https://4799-2402-800-61b3-7be3-fdfd-d068-5bc4-85ab.ngrok-free.app' cũng giống như chạy 'http://localhost:3000'.
				> lưu ý nếu không chạy 'npm run dev' để khởi chạy localhost cổng 3000 thì sẽ lỗi khi truy cập 'https://4799-2402-800-61b3-7be3-fdfd-d068-5bc4-85ab.ngrok-free.app'
			
			- hoặc fixed url được map tới 'localhost:3000'			
				- truy cập lại dashboard > Cloud Edge > Domains: 
					> 'https://dashboard.ngrok.com/cloud-edge/domains'
						> click vào nút 'Start a Tunnel' bên phải domain có sẵn (có biểu tượng như lệnh nhắc cmd)
							> một popup mở lên, tại mục 'Copy and paste the following into your terminal.' copy lệnh và chạy trong terminal:
								'ngrok http --domain=classic-man-pumped.ngrok-free.app 3000'
									> kết quả in ra:								
										Introducing Pay-as-you-go pricing: https://ngrok.com/r/payg
										Session Status                online
										Account                       filezingme (Plan: Free)
										Version                       3.5.0
										Region                        Asia Pacific (ap)
										Latency                       51ms
										Web Interface                 http://127.0.0.1:4040
										Forwarding                    https://classic-man-pumped.ngrok-free.app -> http://localhost:3000
										Connections                   ttl     opn     rt1     rt5     p50     p90     
																	  9       1       0.02    0.02    0.31    6.61    
										HTTP Requests
										-------------
 ]

--------------------------------------------------------------------------------------------
- Clerk webhook [
	> Webhook là một cơ chế cho phép các hệ thống liên kết và tương tác với nhau qua HTTP. Trong ngữ cảnh CRM như Clerk, webhooks thường được sử dụng để cập nhật dữ liệu tự động, thông báo về các sự kiện quan trọng, hoặc kích hoạt các hành động tự động dựa trên các sự kiện cụ thể trong hệ thống.

	Ví dụ, khi một sự kiện quan trọng xảy ra trong Clerk.com (ví dụ: tạo hoặc cập nhật khách hàng, giao dịch mới), Clerk có thể gửi thông báo đến một URL được chỉ định thông qua webhook. Điều này cho phép các ứng dụng hoặc dịch vụ khác "lắng nghe" sự kiện và thực hiện các hành động cần thiết.
	
	- truy cập phần webhooks trong dashboard của clerk.com, có url dạng 'https://dashboard.clerk.com/apps/app_2Zj5M02eblTe1tudnUVsf0HfwxG/instances/ins_2Zj5LzftuGFLaUAnQSl8NWkuzny/webhooks'		
		> click 'Add Endpoint'
			> Endpoint URL: nhập địa chỉ localhost của ngrok domain được tạo ở bài trên và thêm hậu tố /api/webhooks/clerk vào cuối, sẽ được:
				'https://classic-man-pumped.ngrok-free.app/api/webhooks/clerk'
				
			> Filter events: nhập từ khóa 'user' để search và kết quả sổ ra thì tích chọn 'user' với 3 items 'user.created', 'user.deleted', 'user.updated'
			
			> click 'Create'
				> sẽ nhìn thấy một 'Signing Secret' được tạo ra, copy và dán vào file '.env' dưới một biến mới được tạo
					...
					CLERK_WEBHOOKS_SECRET=whsec_FCmqd2fMcPfNm5Jmpo9cBkPfq+mrkJVZ_bk2806
					...
			
					> ref docs 'https://clerk.com/docs/users/sync-data'
					
				> cài đặt package 'svix'
					'$npm install svix'
						> thiết lập endpoint. Svix cung cấp gói xác minh chữ ký webhook, giúp dễ dàng xác minh tính xác thực của các sự kiện webhook.
	
	- tạo file 'app\api\webhooks\clerk\route.ts'		
		> nội dung file [
			import { Webhook } from 'svix'
			import { headers } from 'next/headers'
			import { WebhookEvent } from '@clerk/nextjs/server'
			 
			export async function POST(req: Request) {
			 
			  // You can find this in the Clerk Dashboard -> Webhooks -> choose the webhook
			  const WEBHOOK_SECRET = process.env.CLERK_WEBHOOKS_SECRET
			 
			  if (!WEBHOOK_SECRET) {
				throw new Error('Please add CLERK_WEBHOOKS_SECRET from Clerk Dashboard to .env or .env.local')
			  }
			 
			  // Get the headers
			  const headerPayload = headers();
			  const svix_id = headerPayload.get("svix-id");
			  const svix_timestamp = headerPayload.get("svix-timestamp");
			  const svix_signature = headerPayload.get("svix-signature");
			 
			  // If there are no headers, error out
			  if (!svix_id || !svix_timestamp || !svix_signature) {
				return new Response('Error occured -- no svix headers', {
				  status: 400
				})
			  }
			 
			  // Get the body
			  const payload = await req.json()
			  const body = JSON.stringify(payload);
			 
			  // Create a new Svix instance with your secret.
			  const wh = new Webhook(WEBHOOK_SECRET);
			 
			  let evt: WebhookEvent
			 
			  // Verify the payload with the headers
			  try {
				evt = wh.verify(body, {
				  "svix-id": svix_id,
				  "svix-timestamp": svix_timestamp,
				  "svix-signature": svix_signature,
				}) as WebhookEvent
			  } catch (err) {
				console.error('Error verifying webhook:', err);
				return new Response('Error occured', {
				  status: 400
				})
			  }
			 
			  // Get the ID and type
			  const { id } = evt.data;
			  const eventType = evt.type;
			 
			  console.log(`Webhook with and ID of ${id} and type of ${eventType}`)
			  console.log('Webhook body:', body)
			 
			  return new Response('', { status: 200 })
			}
			 
		]
	
		> lưu ý:
			> thư mục '\api\webhooks\clerk' trong vscode tương đồng với hậu tố 'api/webhooks/clerk' của Endpoint URL 'https://classic-man-pumped.ngrok-free.app/api/webhooks/clerk'
			> ref all hướng dẫn trong 'https://clerk.com/docs/users/sync-data'
			
	- update 'middleware.ts'
		> thêm dòng code sau vào trong export default authMiddleware({})
			...
			publicRoutes: ["/api/webhooks(.*)"]
			...
		
	- truy cập Endpoint và chọn tab 'Testing' để test
		> 'https://dashboard.clerk.com/apps/app_2Zj5M02eblTe1tudnUVsf0HfwxG/instances/ins_2Zj5LzftuGFLaUAnQSl8NWkuzny/webhooks' 
		
		> test tạo user:
			> Send event: chọn 'user.created'
			> click 'Send Example'
				> kết quả success hay fail sẽ báo trong trang & tại mục 'Message Attempts' sau khi click 'Send Example'
				> check terminal để xem kết quả created user 
					> chính là những dòng console.log này trong file 'app\api\webhooks\clerk\route.ts' in ra terminal
						console.log(`Webhook with and ID of ${id} and type of ${eventType}`)
						console.log('Webhook body:', body)
						
		> test xóa user:
			> Send event: chọn 'user.created'
			> click 'Send Example'
				> kết quả success hay fail cũng sẽ báo trong trang & tại mục 'Message Attempts' sau khi click 'Send Example'
				> check terminal để xem kết quả xóa user sẽ như sau:
					Webhook with and ID of user_29wBMCtzATuFJut8jO2VNTVekS4 and type of user.deleted
					Webhook body: {"data":{"deleted":true,"id":"user_29wBMCtzATuFJut8jO2VNTVekS4","object":"user"},"object":"event","type":"user.deleted"}
		
		> test nếu tắt hết cửa sổ đang chạy trong terminal của:
			 $npm run dev
			 $ngrok http --domain=classic-man-pumped.ngrok-free.app 3000
			 
			 > click 'Send Example' để xóa user sẽ nhận được kết quả FAILED
			 > giờ khởi động lại terminal 2 lệnh trên và click 'Send Example' sẽ thấy 'Succeeded'
			 
		>>> tại sao phải tạo tên miền ảo trỏ đến localhost này 'https://classic-man-pumped.ngrok-free.app'???
			> đó là bởi vì trên 'https://dashboard.clerk.com/' thì webhooks mới cho test một url internet chứ ko nhận một url localhost
			
	- test đăng nhập với username tạo mới:
		> vào mục User của 'https://dashboard.clerk.com/' và chọn Delete User để xóa tài khoản trong phần 'Manage Users' đi
		> update 'app\api\webhooks\clerk\route.ts'
			...
			import {db} from '@/lib/db'
			...
			if (eventType==='user.created') {
				await db.user.create({
					data: {
						externalUserId: payload.data.id,
						username: payload.username,
						imageUrl: payload.image_url,
					}
				})
			}
			...
			
		> chạy lệnh 'npx prisma studio' để truy cập 'http://localhost:5555/'
		
		> truy cập 'http://localhost:3000/' và sign-in với username nhập mới

		>>> đang học phút thứ 20 của bài 'Clerk webhook', đang lỗi:
			Invalid `prisma.user.create()` invocation:
			Authentication failed against database server at `aws.connect.psdb.cloud`, the provided database credentials for `drat558012bzz90bfq28` are not valid.
]